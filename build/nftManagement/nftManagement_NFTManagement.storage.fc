;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: SetStake
;; Header: 0x6f179524
;; TLB: set_stake#6f179524 user:address amount:int257 duration:int257 metadata:^string uri:^string = SetStake
;;

(slice, ((slice, int, int, slice, slice))) $SetStake$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1863816484);
    var v'user = sc_0~__tact_load_address();
    var v'amount = sc_0~load_int(257);
    var v'duration = sc_0~load_int(257);
    var v'metadata = sc_0~load_ref().begin_parse();
    var v'uri = sc_0~load_ref().begin_parse();
    return (sc_0, (v'user, v'amount, v'duration, v'metadata, v'uri));
}

;;
;; Type: StakeState
;; TLB: _ user:address amount:int257 duration:int257 metadata:^string uri:^string = StakeState
;;

(slice, int, int, slice, slice) $StakeState$_to_external(((slice, int, int, slice, slice)) v) inline {
    var (v'user, v'amount, v'duration, v'metadata, v'uri) = v; 
    return (v'user, v'amount, v'duration, v'metadata, v'uri);
}

((slice, int, int, slice, slice)) $StakeState$_constructor_user_amount_duration_metadata_uri(slice user, int amount, int duration, slice metadata, slice uri) inline {
    return (user, amount, duration, metadata, uri);
}

;;
;; Type: NFTManagement
;;

builder $NFTManagement$_store(builder build_0, (slice, int, slice, int, int, slice, slice) v) inline {
    var (v'owner, v'id, v'user, v'amount, v'duration, v'metadata, v'uri) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'id, 257);
    build_0 = __tact_store_address(build_0, v'user);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'amount, 257);
    build_1 = build_1.store_int(v'duration, 257);
    build_1 = build_1.store_ref(begin_cell().store_slice(v'metadata).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'uri).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, slice, int, int, slice, slice))) $NFTManagement$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_int(257);
    var v'user = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'amount = sc_1~load_int(257);
    var v'duration = sc_1~load_int(257);
    var v'metadata = sc_1~load_ref().begin_parse();
    var v'uri = sc_1~load_ref().begin_parse();
    return (sc_0, (v'owner, v'id, v'user, v'amount, v'duration, v'metadata, v'uri));
}

(slice, ((slice, int))) $NFTManagement$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'owner, v'id));
}

(slice, int, slice, int, int, slice, slice) $NFTManagement$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NFTManagement$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int id) = $sc~$NFTManagement$init$_load();
        $sc.end_parse();
        return $NFTManagement$_contract_init(owner, id);
    }
}

() $NFTManagement$_contract_store((slice, int, slice, int, int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NFTManagement$_store(b, v);
    set_data(b.end_cell());
}