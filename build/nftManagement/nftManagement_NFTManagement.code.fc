#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "nftManagement_NFTManagement.headers.fc";
#include "nftManagement_NFTManagement.stdlib.fc";
#include "nftManagement_NFTManagement.constants.fc";
#include "nftManagement_NFTManagement.storage.fc";

;;
;; Contract NFTManagement functions
;;

(slice, int, slice, int, int, slice, slice) $NFTManagement$_contract_init(slice $owner, int $id) impure inline_ref {
    var (($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri)) = (null(), null(), null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'id = $id;
    $self'user = $owner;
    $self'amount = 0;
    $self'duration = 0;
    $self'metadata = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    $self'uri = __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7();
    return ($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri);
}

((slice, int, slice, int, int, slice, slice), (slice, int, int, slice, slice)) $NFTManagement$_fun_state((slice, int, slice, int, int, slice, slice) $self) impure inline_ref {
    var (($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri)) = $self;
    return (($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri), $StakeState$_constructor_user_amount_duration_metadata_uri($self'user, $self'amount, $self'duration, $self'metadata, $self'uri));
}

;;
;; Receivers of a Contract NFTManagement
;;

(((slice, int, slice, int, int, slice, slice)), ()) $NFTManagement$_internal_binary_SetStake((slice, int, slice, int, int, slice, slice) $self, (slice, int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri) = $self;
    var ($msg'user, $msg'amount, $msg'duration, $msg'metadata, $msg'uri) = $msg;
    throw_unless(24861, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'user = $msg'user;
    $self'amount = $msg'amount;
    $self'duration = $msg'duration;
    $self'metadata = $msg'metadata;
    $self'uri = $msg'uri;
    return (($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri), ());
}

(((slice, int, slice, int, int, slice, slice)), ()) $NFTManagement$_internal_binary_Deploy((slice, int, slice, int, int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri)~$NFTManagement$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'id, $self'user, $self'amount, $self'duration, $self'metadata, $self'uri), ());
}

;;
;; Get methods of a Contract NFTManagement
;;

_ %state() method_id(77589) {
    var self = $NFTManagement$_contract_load();
    var res = self~$NFTManagement$_fun_state();
    return $StakeState$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmSPiPuw6mhKjZ8P7yV6YVaNv5FbD7czu98AiWWDRVXAjF";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract NFTManagement
;;

((slice, int, slice, int, int, slice, slice), int) $NFTManagement$_contract_router_internal((slice, int, slice, int, int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive SetStake message
    if (op == 1863816484) {
        var msg = in_msg~$SetStake$_load();
        self~$NFTManagement$_internal_binary_SetStake(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$NFTManagement$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $NFTManagement$_contract_load();
    
    ;; Handle operation
    int handled = self~$NFTManagement$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $NFTManagement$_contract_store(self);
}
